<!--#
prototype for Victor Stewart
-->
<!--#declaration
/**
 * {
 * "token": "A619828KAIJ6D3",
 * "type": "localesData",
 * "radius": "near",
 * "location": "40.7831 N, 73.9712 W"
 * }
 */

class Request {
public:
   // Check for memory error
   U_MEMORY_TEST

   // Allocator e Deallocator
   U_MEMORY_ALLOCATOR
   U_MEMORY_DEALLOCATOR

   UString token, type, radius, location;

   Request()
      {
      U_TRACE_REGISTER_OBJECT(5, Request, "")
      }

   Request(const Request& r) : token(r.token), type(r.type), radius(r.radius), location(r.location)
      {
      U_TRACE_REGISTER_OBJECT(5, Request, "%p", &r)

      U_MEMORY_TEST_COPY(r)
      }

   ~Request()
      {
      U_TRACE_UNREGISTER_OBJECT(5, Request)
      }

#ifdef DEBUG
   const char* dump(bool breset) const
      {
      *UObjectIO::os << "token    (UString " << (void*)&token    << ")\n"
                     << "type     (UString " << (void*)&type     << ")\n"
                     << "radius   (UString " << (void*)&radius   << ")\n"
                     << "location (UString " << (void*)&location << ')';

      if (breset)
         {
         UObjectIO::output();

         return UObjectIO::buffer_output;
         }

      return 0;
      }
#endif

private:
   Request& operator=(const Request&) { return *this; }
};

// JSON TEMPLATE SPECIALIZATIONS

template <> class U_EXPORT UJsonTypeHandler<Request> : public UJsonTypeHandler_Base {
public:
   explicit UJsonTypeHandler(Request& val) : UJsonTypeHandler_Base(&val) {}

   void toJSON(UValue& json)
      {
      U_TRACE(0, "UJsonTypeHandler<Request>::toJSON(%p)", &json)

      json.toJSON(U_JSON_TYPE_HANDLER(Request, token,    UString));
      json.toJSON(U_JSON_TYPE_HANDLER(Request, type,     UString));
      json.toJSON(U_JSON_TYPE_HANDLER(Request, radius,   UString));
      json.toJSON(U_JSON_TYPE_HANDLER(Request, location, UString));
      }

   void fromJSON(UValue& json)
      {
      U_TRACE(0, "UJsonTypeHandler<Request>::fromJSON(%p)", &json)

      json.fromJSON(U_JSON_TYPE_HANDLER(Request, token,    UString));
      json.fromJSON(U_JSON_TYPE_HANDLER(Request, type,     UString));
      json.fromJSON(U_JSON_TYPE_HANDLER(Request, radius,   UString));
      json.fromJSON(U_JSON_TYPE_HANDLER(Request, location, UString));
      }
};

/**
 * [
 * { "name": "Business 1"
 *   "rating": "Red"
 *   "address": "123 park lane, New York, NY, USA 10028"
 *   "phone": "12126465788"
 *   "url": "www.business1.com" } ,
 *
 * ....
 *
 * { "name": "Business 20"
 *   "rating": "Yellow"
 *   "address": "837 mott street, New York, NY, USA 10019"
 *   "phone": "12124829384"
 *   "url": "www.business2.com" }
 * ]
 */

class Response {
public:
   // Check for memory error
   U_MEMORY_TEST

   // Allocator e Deallocator
   U_MEMORY_ALLOCATOR
   U_MEMORY_DEALLOCATOR

   UString name, rating, address, phone, url;

   Response()
      {
      U_TRACE_REGISTER_OBJECT(5, Response, "")
      }

   Response(const Response& r) : name(r.name), rating(r.rating), address(r.address), phone(r.phone), url(r.url)
      {
      U_TRACE_REGISTER_OBJECT(5, Response, "%p", &r)

      U_MEMORY_TEST_COPY(r)
      }

   ~Response()
      {
      U_TRACE_UNREGISTER_OBJECT(5, Response)
      }

   // SERVICES

   bool operator<(const Response& other) const { return cmp_obj(&name, &other.name); }

   static int cmp_obj(const void* a, const void* b)
      {
      U_TRACE(5, "Response::cmp_obj(%p,%p)", a, b)

      return (*(const Response**)a)->name.compare((*(const Response**)b)->name);
      }

#ifdef DEBUG
   const char* dump(bool breset) const
      {
      *UObjectIO::os << "url     (UString " << (void*)&url     << ")\n"
                     << "name    (UString " << (void*)&name    << ")\n"
                     << "phone   (UString " << (void*)&phone   << ")\n"
                     << "rating  (UString " << (void*)&rating  << ")\n"
                     << "address (UString " << (void*)&address << ')';

      if (breset)
         {
         UObjectIO::output();

         return UObjectIO::buffer_output;
         }

      return 0;
      }
#endif

private:
   Response& operator=(const Response&) { return *this; }
};

// JSON TEMPLATE SPECIALIZATIONS

template <> class U_EXPORT UJsonTypeHandler<Response> : public UJsonTypeHandler_Base {
public:
   explicit UJsonTypeHandler(Response& val) : UJsonTypeHandler_Base(&val) {}

   void toJSON(UValue& json)
      {
      U_TRACE(0, "UJsonTypeHandler<Response>::toJSON(%p)", &json)

      json.toJSON(U_JSON_TYPE_HANDLER(Response, name,    UString));
      json.toJSON(U_JSON_TYPE_HANDLER(Response, rating,  UString));
      json.toJSON(U_JSON_TYPE_HANDLER(Response, address, UString));
      json.toJSON(U_JSON_TYPE_HANDLER(Response, phone,   UString));
      json.toJSON(U_JSON_TYPE_HANDLER(Response, url,     UString));
      }

   void fromJSON(UValue& json)
      {
      U_TRACE(0, "UJsonTypeHandler<Response>::fromJSON(%p)", &json)

      json.fromJSON(U_JSON_TYPE_HANDLER(Response, name,    UString));
      json.fromJSON(U_JSON_TYPE_HANDLER(Response, rating,  UString));
      json.fromJSON(U_JSON_TYPE_HANDLER(Response, address, UString));
      json.fromJSON(U_JSON_TYPE_HANDLER(Response, phone,   UString));
      json.fromJSON(U_JSON_TYPE_HANDLER(Response, url,     UString));
      }
};

class HTTP2Push : public UEventTime {
public:

   UString message;
   const char* http2_server;
   const char* apple_cert;
   const char* app_bundle_id;
   const char* token;

   // COSTRUTTORI

   HTTP2Push() : UEventTime(15L * 60L, 0L), message(U_CAPACITY)
      {
      U_TRACE_REGISTER_OBJECT(0, HTTP2Push, "", 0)

      http2_server  = "https://api.development.push.apple.com";
      apple_cert    = "/certificates/samplepush/development.pem";
      app_bundle_id = "it.tabasoft.samplepush";
      token         = "dbdaeae86abcde56rtyww1859fb41d2c7b2cberrttyyy053ec48987847";
      }

   virtual ~HTTP2Push() U_DECL_FINAL
      {
      U_TRACE_UNREGISTER_OBJECT(0, HTTP2Push)
      }

   // define method VIRTUAL of class UEventTime

   virtual int handlerTime() U_DECL_FINAL
      {
      U_TRACE_NO_PARAM(0, "HTTP2Push::handlerTime()")

      pid_t pid = UServer_Base::startNewChild();

      if (pid > 0) U_RETURN(0); // parent

      // child

      message.snprintf("{\"aps\":{\"alert\":\"Hi!\",\"sound\":\"default\"}}", 0);

#  ifdef USE_LIBCURL
      if (UCURL::sendHTTP2Push(http2_server, apple_cert, app_bundle_id, token, message) == false)
#  endif
      {
      U_WARNING("UCURL::sendHTTP2Push() failed");
      }

      if (pid == 0) UServer_Base::endNewChild();

      U_RETURN(0);
      }

#if defined(DEBUG) && defined(U_STDCPP_ENABLE)
   const char* dump(bool _reset) const { return UEventTime::dump(_reset); }
#endif

private:
   HTTP2Push(const HTTP2Push&) : UEventTime() {}
   HTTP2Push& operator=(const HTTP2Push&)     { return *this; }
};

static UValue* pvalue;
static Request* prequest;
static UMongoDBClient* mc;
static Response* presponse;
static UVector<Response*>* pvresponse;

static void usp_init_businesses()
{
   U_TRACE(5, "::usp_init_businesses()")

   UEventTime* push;

   U_NEW(HTTP2Push, push, HTTP2Push);

   UTimer::insert(push);
}

static void usp_fork_businesses()
{
   U_TRACE(5, "::usp_fork_businesses()")

   U_NEW(UMongoDBClient, mc, UMongoDBClient);

   if (mc->connect() == false)
      {
      U_WARNING("usp_fork_businesses(): connection failed");

      return;
      }

   if (mc->selectCollection("database", "businesses") == false)
      {
      U_WARNING("usp_fork_businesses(): selectCollection() failed");

      return;
      }

   U_NEW(Request, prequest, Request);
   U_NEW(Response, presponse, Response);
   U_NEW(UValue, pvalue, UValue(ARRAY_VALUE));
   U_NEW(UVector<Response*>, pvresponse, UVector<Response*>);
}

#ifdef DEBUG
static void usp_end_businesses()
{
   U_TRACE(5, "::usp_end_businesses()")

   delete mc;

   if (pvalue)
      {
      delete pvalue;
      delete prequest;
      delete presponse;
      delete pvresponse;
      }
}
#endif
-->
<!--#header
Content-Type: application/json
-->
<!--#code
if (USP_JSON_REQUEST_PARSE(*prequest))
   {
   uint32_t i, n;

   // 1) identify user by TOKEN

   (void) mc->findAll(); // mc->find(prequest->token);

   for (i = 0, n = mc->vitem.size(); i < n; ++i)
      {
      JSON_parse(mc->vitem[i], *presponse);

      // 2) Filter by RADIUS around LOCATION

      if (true)
         {
         Response* nresponse;

         U_NEW(Response, nresponse, Response(*presponse));

         pvresponse->push_back(nresponse);
         }
      }

   n = pvresponse->size();

   // 3) sort list by ranking algorithm

   pvresponse->sort(Response::cmp_obj);

   // 4) return first 20 businesses

   if (n > 20) pvresponse->erase(20, n);
   }

USP_JSON_stringify(*pvalue, UVector<Response*>, *pvresponse);

pvalue->clear();
pvresponse->clear();
-->
